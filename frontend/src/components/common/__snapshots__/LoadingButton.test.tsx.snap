// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loading button idle state 1`] = `
<LoadingButton
  loading={false}
>
  <Styled(MuiBox)
    className="makeStyles-wrapper-1"
  >
    <div
      className="MuiBox-root MuiBox-root-3 makeStyles-wrapper-1"
    >
      <WithStyles(ForwardRef(Button))
        disabled={false}
        loading={false}
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          disabled={false}
          loading={false}
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-text"
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            loading={false}
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-text"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              loading={false}
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-text"
                disabled={false}
                loading={false}
                onBlur={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  Test Button
                </span>
                <WithStyles(memo)
                  center={false}
                >
                  <ForwardRef(TouchRipple)
                    center={false}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </div>
  </Styled(MuiBox)>
</LoadingButton>
`;

exports[`loading button loading state 1`] = `
<LoadingButton
  loading={true}
>
  <Styled(MuiBox)
    className="makeStyles-wrapper-1"
  >
    <div
      className="MuiBox-root MuiBox-root-4 makeStyles-wrapper-1"
    >
      <WithStyles(ForwardRef(Button))
        disabled={true}
        loading={true}
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          disabled={true}
          loading={true}
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-text Mui-disabled"
            component="button"
            disabled={true}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            loading={true}
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-text Mui-disabled"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={true}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              loading={true}
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-text Mui-disabled Mui-disabled"
                disabled={true}
                loading={true}
                onBlur={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={-1}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  Test Button
                </span>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
      <WithStyles(ForwardRef(CircularProgress))
        className="makeStyles-loadingSpinner-2"
        size={24}
      >
        <ForwardRef(CircularProgress)
          className="makeStyles-loadingSpinner-2"
          classes={
            Object {
              "circle": "MuiCircularProgress-circle",
              "circleDeterminate": "MuiCircularProgress-circleDeterminate",
              "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
              "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
              "circleStatic": "MuiCircularProgress-circleStatic",
              "colorPrimary": "MuiCircularProgress-colorPrimary",
              "colorSecondary": "MuiCircularProgress-colorSecondary",
              "determinate": "MuiCircularProgress-determinate",
              "indeterminate": "MuiCircularProgress-indeterminate",
              "root": "MuiCircularProgress-root",
              "static": "MuiCircularProgress-static",
              "svg": "MuiCircularProgress-svg",
            }
          }
          size={24}
        >
          <div
            className="MuiCircularProgress-root makeStyles-loadingSpinner-2 MuiCircularProgress-colorPrimary MuiCircularProgress-indeterminate"
            role="progressbar"
            style={
              Object {
                "height": 24,
                "width": 24,
              }
            }
          >
            <svg
              className="MuiCircularProgress-svg"
              viewBox="22 22 44 44"
            >
              <circle
                className="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate"
                cx={44}
                cy={44}
                fill="none"
                r={20.2}
                strokeWidth={3.6}
                style={Object {}}
              />
            </svg>
          </div>
        </ForwardRef(CircularProgress)>
      </WithStyles(ForwardRef(CircularProgress))>
    </div>
  </Styled(MuiBox)>
</LoadingButton>
`;
